var documenterSearchIndex = {"docs":
[{"title":"consistent_sampler.jl Documentation","location":"#consistent_sampler.jl-Documentation-1","category":"section","text":"","page":"Home"},{"title":"Ticket","location":"#Ticket-1","category":"section","text":"","page":"Home"},{"title":"Home","location":"#","category":"page","text":"Ticket\r\ncopyTicket(::Ticket)\r\nprintln(::Ticket)\r\nstring(::Ticket)\r\nnextTicket(::Ticket)\r\nmake_ticket_priority_queue(::AbstractArray,seed)","page":"Home"},{"title":"Ticket","location":"#Ticket","category":"type","text":"Ticket\n\nA struct which stores a ticket number, id, and generation\n\n\n\n\n\n","page":"Home"},{"title":"copyTicket","location":"#copyTicket-Tuple{Ticket}","category":"method","text":"copyTicket(t::Ticket)\n\nReturns a copy of the ticket 't'\n\n\n\n\n\n","page":"Home"},{"title":"Base.println","location":"#Base.println-Tuple{Ticket}","category":"method","text":"println(t::Ticket)\n\nPrints out the values of a ticket on a line\n\n\n\n\n\n","page":"Home"},{"title":"Base.string","location":"#Base.string-Tuple{Ticket}","category":"method","text":"string(t::Ticket)\n\nReturns a string version of a Ticket\n\n\n\n\n\n","page":"Home"},{"title":"nextTicket","location":"#nextTicket-Tuple{Ticket}","category":"method","text":"nextTicket(t::Ticket)\n\nReturns a ticket with 1 added to the generation, and the ticketnumber being set to nextfraction of the current ticket number\n\n\n\n\n\n","page":"Home"},{"title":"make_ticket_priority_queue","location":"#make_ticket_priority_queue-Tuple{AbstractArray,Any}","category":"method","text":"make_ticket_priority_queue(idlist::AbstractArray,seed)\n\nReturns a priority queue with the values being tickets made with an id from idlist and a seed of seed, and their corresponding keys being their ticket_number\n\n\n\n\n\n","page":"Home"},{"title":"Formatting","location":"#Formatting-1","category":"section","text":"","page":"Home"},{"title":"Home","location":"#","category":"page","text":"trim(::String,::Int)\r\nDuplicates(::AbstractArray)","page":"Home"},{"title":"trim","location":"#trim-Tuple{String,Int32}","category":"method","text":"trim(x::String,length::Int=9)\n\nTrims a string 'x' to 'length' (defaulted to 9) digits after the last consecutive 9 after decimal\n\n\n\n\n\n","page":"Home"},{"title":"Duplicates","location":"#Duplicates-Tuple{AbstractArray}","category":"method","text":"Duplicates(L::AbstractArray)\n\nReturns an array of all the duplicates in the array L\n\n\n\n\n\n","page":"Home"},{"title":"Hashing","location":"#Hashing-1","category":"section","text":"","page":"Home"},{"title":"Home","location":"#","category":"page","text":"sha256_hex(h)\r\nsha256_uniform(h)\r\nfirst_fraction(id,seed::Any,seed_hash::String)\r\nnext_fraction(::String)","page":"Home"},{"title":"sha256_hex","location":"#sha256_hex-Tuple{Any}","category":"method","text":"sha256_hex(h)\n\nReturns the hexadecimal form of the sha256(h)\n\n\n\n\n\n","page":"Home"},{"title":"sha256_uniform","location":"#sha256_uniform-Tuple{Any}","category":"method","text":"sha256_uniform(h)\n\nReturns a decimal point followed by the string form of the digits of the decimal form of sha256_uniform(h) in reverse order\n\n\n\n\n\n","page":"Home"},{"title":"first_fraction","location":"#first_fraction-Tuple{Any,Any,String}","category":"method","text":"first_fraction(id,seed,seed_hash::String=\"unknown\")\n\nReturns the sha256_uniform of the id and sha256_uniform of the seed, which can also be directly implemented as seed_hash to save time for repetetive use\n\n\n\n\n\n","page":"Home"},{"title":"next_fraction","location":"#next_fraction-Tuple{String}","category":"method","text":"next_fraction(x::String)\n\nReturns the first sha256_uniform of a String followed by an increasing number which is greater than the original String\n\n\n\n\n\n","page":"Home"},{"title":"With/Without Replacement","location":"#With/Without-Replacement-1","category":"section","text":"","page":"Home"},{"title":"Home","location":"#","category":"page","text":"withoutReplacement(::Array{Ticket},::Int)\r\nwithReplacement(::Array{Ticket},::Int)","page":"Home"},{"title":"withoutReplacement","location":"#withoutReplacement-Tuple{Array{Ticket,N} where N,Int32}","category":"method","text":"withoutReplacement(t::Array{Ticket},l::Int)\n\nReturns the first l indices of T\n\n\n\n\n\n","page":"Home"},{"title":"withReplacement","location":"#withReplacement-Tuple{Array{Ticket,N} where N,Int32}","category":"method","text":"withReplacement(t::Array{Ticket},l::Int)\n\nReturns an array of l tickets, but every time a ticket is put in this array, its value is put back into t as nextTicket of itself\n\n\n\n\n\n","page":"Home"},{"title":"Sampler","location":"#Sampler-1","category":"section","text":"","page":"Home"},{"title":"Home","location":"#","category":"page","text":"sampler(ids::AbstractArray,; seed::Any=nothing, take::Int=length(ids),with_replacement=false,drop::Int=0,output=\"tuple\",digits::Int=9)","page":"Home"},{"title":"sampler","location":"#sampler-Tuple{AbstractArray}","category":"method","text":"sampler(ids::AbstractArray,; seed::Any=nothing, take::Int=length(ids),with_replacement=false,drop::Int=0,output=\"tuple\",digits::Int=9)\n\nReturns the withoutReplacement or withReplacement function of a priority queue of tickets, made by make_ticket_priority_queue(ids,seed), with length of drop+take, with the first drop idexes removed, outputted in output form (Ticket,tuple, or ids), with the ticket_numbers trimmed to 'digits' digits\n\n\n\n\n\n","page":"Home"}]
}
